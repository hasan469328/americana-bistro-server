[
  {
    "question": "Tell us the differences between uncontrolled and controlled components.",
    "answer": "Uncontrolled components are form elements that are handled by the DOM instead of React. This means that their values are not controlled by React and are instead read from the DOM when needed. Controlled components, on the other hand, are React components that manage their own state and update the state when the value of the form element changes. This allows React to have full control over the form's data, enabling it to validate, manipulate, and submit the data more easily."
  },
  {
    "question": "How to validate React props using PropTypes",
    "answer": "PropTypes is a type-checking feature built into React that helps developers catch errors in props before they cause problems in the application. To use PropTypes, you need to import the library and specify the data types and validation rules for each prop in the component's propTypes object. For example, you can use PropTypes.string to specify that a prop should be a string. When a component receives a prop of the wrong type or value, React will log a warning in the console, helping you identify and fix issues early on in development."
  },
  {
    "question": "Tell us the difference between nodejs and express js.",
    "answer": "Node.js is a runtime environment that allows developers to execute JavaScript code on the server-side. It provides a powerful, event-driven, non-blocking I/O model that makes it a popular choice for building scalable and high-performance applications. Express.js, on the other hand, is a web application framework built on top of Node.js. It provides a set of features and tools for building web applications and APIs, including routing, middleware, and templates. While Node.js is the core runtime, Express.js adds additional functionality and structure to the development process."
  },
  {
    "question": "What is a custom hook, and why will you create a custom hook?",
    "answer": "A custom hook is a JavaScript function that utilizes the React Hooks API to create reusable logic. It allows you to encapsulate complex logic and reuse it across multiple components. You can create a custom hook when you find yourself writing similar code across multiple components or when you want to share logic between components in a declarative way. Custom hooks help to reduce code duplication, increase reusability, and make your codebase more maintainable and scalable."
  }
]
